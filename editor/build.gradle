version = '0.3-SNAPSHOT'
group = 'io.github.dahuapp'
encoding = 'UTF-8'

description = """\
Dahu is an awesome screencasting software.

------------------------------------------
Project version: ${version}
Gradle version: ${gradle.gradleVersion}
------------------------------------------
"""

/***********************************************************************************************************************
 /* Apply IDE plugin
 **********************************************************************************************************************/

apply plugin: 'idea'
apply plugin: 'eclipse'

/***********************************************************************************************************************
 * Apply JavaFX plugin
 *
 * See: http://speling.shemnon.com/blog/2013/05/18/javafx-gradle-plugin-0-dot-3-0-released/
 **********************************************************************************************************************/

apply from: 'http://dl.bintray.com/shemnon/javafx-gradle/0.3.0/javafx.plugin'

/***********************************************************************************************************************
 * Apply custom tasks
 **********************************************************************************************************************/

task wrapper(type: Wrapper) {
    gradleVersion = '1.8'
}

run.doFirst {
    if (project.hasProperty('args')) {
        args project.args.split('\\s+')
    }
    if (project.hasProperty('workingDir')) {
        workingDir project.workingDir
    }
}

/***********************************************************************************************************************
 * Apply project properties
 **********************************************************************************************************************/

compileJava {
    sourceCompatibility = 7
    targetCompatibility = 7
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    // compile group: 'edu.stanford.ejalbert', name: 'BrowserLauncher2', version: '1.3'
    // compile fileTree(dir: 'lib', includes: ['*.jar'])
    // runtime fileTree(dir: 'lib', includes: ['*.jar'])
    testCompile group: 'junit', name: 'junit', version: '4.10'
}

javafx {
    appID = 'DahuEditor'
    appName = 'Dahu Editor'
    mainClass = 'io.dahuapp.editor.app.DahuApp'

    jvmArgs = ['-XX:+AggressiveOpts', '-XX:CompileThreshold=1']
    systemProperties = ['prism.disableRegionCaching': 'true']
    /* TODO: we can hardcode arguments like this, but isn't there a
    way to get the actual runtime parameters?
    arguments = ['-l', '--fast']
     */

    embedLauncher = true

    /* deploy/info attributes */

    category = 'Screencast'
    copyright = 'Copyright (c) 2013 Dahu Team'
    description = '{description}'
    licenseType = 'LGPL v2.1 or later'
    installSystemWide = true
    menu = true
    shortcut = true

    /* app icons attributes */

    icons {
        shortcut = [
                'dahu-icon-16.png', 'dahu-icon-32.png', 'dahu-icon-64.png',
                'dahu-icon-128.png', 'dahu-icon-256.png', 'dahu-icon-512.png']
        volume = 'javafx-icon.png'
        setup = 'javafx-icon.png'
    }

    /* applet and webstart attributes */

    /*
    debugKey {
        alias = 'debugKey'
        //keyPass = 'password' // provide via command line
        //keyStore = file('~/keys/debug.jks')
        //storePass = 'password'  // provide via command line
    }

    releaseKey {
        alias = 'production'
        //keyPass = 'password' // provide via command line
        //keyStore = file('/Volumes/ProdThumbDrive/production.jks')
        //storePass = 'password'  // provide via command line
    }

    signingMode 'release'
    */

    width = 800
    height = 600
    embedJNLP = false

    /* arbitrary jnlp icons attributes */

    icon {
        href = 'dahu-icon-128.png'
        kind = 'splash'
        width = 128
        height = 128
    }

    icon {
        href = 'dahu-32@2x.png'
        kind = 'selected'
        width = 16
        height = 16
        scale = 1
    }
}

/* "gradle uberjar" makes a jar with all dependencies in */
task uberjar(type: Jar) {
   dependsOn configurations.runtime
   manifest.attributes('Main-Class': 'io.dahuapp.editor.app.DahuApp')
   from sourceSets.main.output
   from { configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) } }
}
